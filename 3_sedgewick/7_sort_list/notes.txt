This is my attempt at an O(nLogn) sorting algorithm that can operate on a Linked List.  I decided I wanted to try and implement both MergeSort and QuickSort, so I started by attempting Mergesort.  I came up with an algorithm that does in fact sort a linked list, but not in O(nLogn) time.  So then I took a step back and implemented it using integers and an array instead, and this was successful.  And right now I'm trying to look at my code and figure out what I did wrong:
------------------
public class MergeSort{
  /*Basic idea:
    1. Divide the unsorted list into n sublists, each containing 1 element
    2. Repeatedly merge sublists to produce new sorted sublists until there is only 1 sublist remaining.
  */
  public static ListNode sortList(ListNode head) {
    if ( head == null || getSize(head) == 0){ return head; }
    if (head.next == null){ return head; }
    else{
      int size = getSize(head);
      head = merge(sortList(splitNode(head)), sortList(head));
    }
    return head;
  }

  public static int getSize(ListNode head) {
    int i=1;
    while (head.next != null){ i++; head = head.next;}
    return i;
  }

  public static ListNode splitNode(ListNode head){
    int halfSize = getSize(head)/2;
    ListNode middleNode = head;
    ListNode middleNodePre = head;
    for(int i=0; i<halfSize; i++){
      middleNode = middleNode.next;
      if(i < halfSize-1){ middleNodePre = middleNode; }
    }
    middleNodePre.next = null;
    return middleNode;
  }

  public static ListNode merge(ListNode a, ListNode b){
    ListNode result;
    if (a == null && b == null){ return null; }
    else if (a == null) { result = new ListNode(b.val); b=b.next; }
    else if (b == null) { result = new ListNode(a.val); a=a.next; }
    else{
      if (a.val < b.val){ result = new ListNode(a.val); a=a.next; }
      else{ result = new ListNode(b.val); b=b.next; }
    }

    while(!(a == null && b == null)){
      if (a == null) { add(result, b.val); b = b.next; }
      else if (b == null) { add(result, a.val); a = a.next; }
      else{
        if (a.val < b.val){ add(result, a.val); a= a.next; }
        else{ add(result, b.val); b = b.next; }
      }
    }
    return result;
  }

  public static void add(ListNode a, int val){
    ListNode currentNode = a;
    while (currentNode.next != null){
      currentNode = currentNode.next;
    }
    currentNode.next = new ListNode(val);
  }

}
----------------------

-The duplicated code in the merge method is definitely an issue
So ome more time I'll outline the basic steps for mergesort:
-If the list is empty or only has one element, return it as is.
-Divide the list into halves
-Sort each half recursively
-Merge the halves back together

Pseudocode:

class MergeSort
  class Node
    int val
    Node next

  sort(Node head)
    if(head.size is 0 or 1), return head
    headRight = split(head) //Here cut off original list when you make the new one so you can just use head as headLeft
    left = sort(head)
    right = sort(headRight)
    merge(left, right)
    return head

  merge(Node left, Node right)
    count = left.size + right.size

---------------------
-So at this point I did some googling and I discovered a new method of finding the middle element of a Linked List.  Namely, go through the list once and keep a slow
