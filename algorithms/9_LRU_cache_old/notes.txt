LRU Cache - basically a cache that supports the following operations:
- get(key):
-- Get the value (will always be positive) of the keyy if it exists, otherwise return -1.
- set(key, value)
-- Set or insert the value if the key is not already present.  When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.

Approach:
-I need a way to keep a bunch of positive integers and a counter for each one that helps us figure out which is the oldest one.
-For example: set(1, 1) --> [1]->1 (0) (CAPACITY=3)
              set(2, 2) --> [1]->1 (1) [2]->2 (0)
              set(3, 3) --> [1]->1 (2) [2]->2 (1) [3]->3 (0)
              get(2) --> 2
              get(5) --> -1
              set(5, 5) -->
                --Is the cache full?  Yes --> Which element has the highest count? [1].  Replace [1] with [5], and decrement all the counts.

-I like hashmaps and I also like custom data structures so I'm going to assume Leetcode lets you do whatever you want involving inner classes etc. and use a hash map where the entries are an (x,y) pair, with x corresponding to the stored value and y being the count for that value.

-So the LRUCache is basically a wrapper around a HashMap that contains (x,y) pairs, but it keeps track of capacity.

-The set method, void set(int key, int value):
--Does the key already exist?
---If so, update the key and set its count back to 0, and increment all others.
--If not,
---Check to see if there's space left (if the cache is at capacity or not)
---If it's at capacity, delete the key with the highest count, add the new element w/ count 0 and increment the rest of the elements
---If there's still space left, add the key with count 0 and increment all the other counts

-The get method, void get(int key):
--

-Helper methods:
--isFull
--toString
--contains

-At this point, I seemed to have a working LRU Cache but Leetcode wasn't accepting my solution (saying it took too much time), so I gave up on doing it this way.  Apparently all the operations are supposed to be O(n), so I basically have to use a Linked List (or LinkedHashMap, but I feel like that's cheating) to implement this.  So I saved this as LRUCache-failure.java and started over with a new LRUCache.java that's based on a doubly linked list, which I will also now implement.

